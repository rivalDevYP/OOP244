Reflection for Workshop 2
*************************

*************
* Questions *
*************

Question 1: Why do you need to allocate new dynamic memory when you increase the size of an existing array of dynamically allcoated memory?

Question 2: The Kingdom structure stores the name of the kingdom in an array of characters. At the end of the program, we do not use the delete operator to deallocate the memory occupied by the name. Why don't we need to use the delete operator on this array itself? Explain.

Question 3: There are two display(...) function definitions. How does the compiler know which definition to call from your main function?

Question 4: Explain what you have learned in the workshop.

***********
* Answers *
***********

1) Because it is not possible to extend the already allocated array of dynamic memory. If you
can to extend an already allocated segment, you must fully delete the segment, and start alloc
ating fresh from the beginning.

2) The destructor includes this. It will be automatically deallocated when the program is finished running.

3) This is called overloading. The compiler looks first at when you call the function, and tak
es note of the parameter you are passing to the function. Then it goes to the function declara
tion, and confirms which parameters match (the ones sent and the ones recieved). Then it goes
to that function (The one that matches), and it completes the operation.

4) What I have learned: How to allocate and deallocate dynamic memory. How to implement manual
 allocation of memory in my future applications. How to overload functions for easier programm
ing. And finally, how to be an efficient programmer.

********************
* Quiz corrections *
********************

1) A member function can be a query or a modifier. Which C++ keyword idenfifies it as a query?

	Answer: "const"

2) Consider a function that is a member function of the class names MyClass. What prefix do you add to the function definition in an implementation file (.cpp)?
	
	Answer: "::" or "scope resolution operator"

4) Write the statement that discards one character from the standard input buffer?

	Answer: "cin.ignore();"

5) The width() member function of the ostream class applied to: 

	Answer: "The next field only"

6) This program should display the number e to 4 decimal places in a field of 10 on standard output. Add the statements needed to product this format. Use statements that will ensure the same result if the value of e is changed to 234.56791234:

	#include <iostream>
	int main ()
	{
		double e = 2.71828182845;
		



		std::cout<<e<<std::endl;
	}